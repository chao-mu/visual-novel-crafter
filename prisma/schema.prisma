generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//
// User Created Models
//

model Story {
  id          Int      @id @default(autoincrement())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  createdBy  User        @relation(fields: [createdById], references: [id])
  timelines  Timeline[]
  characters Character[]
  Image      Image[]
  Counter    Counter[]
  Input      Input[]

  @@index([title])
  @@index([createdById])
}

model Say {
  id        Int      @id @default(autoincrement())
  order     Int
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  timelineId  Int
  characterId Int

  createdBy User      @relation(fields: [createdById], references: [id])
  timeline  Timeline  @relation(fields: [timelineId], references: [id])
  character Character @relation(fields: [characterId], references: [id])

  @@index([createdById])
  @@index([timelineId])
  @@index([characterId])
}

model Character {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  storyId     Int
  createdBy   User   @relation(fields: [createdById], references: [id])

  story Story @relation(fields: [storyId], references: [id])
  says  Say[]

  @@index([createdById])
  @@index([storyId])
}

model Timeline {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  storyId     Int

  createdBy   User        @relation(fields: [createdById], references: [id])
  story       Story       @relation(fields: [storyId], references: [id])
  says        Say[]
  menus       Menu[]
  localJumps  Jump[]      @relation(name: "JumpFromTimeline")
  remoteJumps Jump[]      @relation(name: "JumpToTimeline")
  ShowImage   ShowImage[]

  @@index([createdById])
  @@index([storyId])
}

model Input {
  id        Int      @id @default(autoincrement())
  question  String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  storyId     Int
  timelineId  Int

  createdBy User  @relation(fields: [createdById], references: [id])
  story     Story @relation(fields: [storyId], references: [id])

  @@index([createdById])
  @@index([storyId])
}

model Jump {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdById    String
  fromTimelineId Int
  toTimelineId   Int

  fromTimeline Timeline @relation(name: "JumpFromTimeline", fields: [fromTimelineId], references: [id])
  toTimeline   Timeline @relation(name: "JumpToTimeline", fields: [toTimelineId], references: [id])
  createdBy    User     @relation(fields: [createdById], references: [id])

  @@index([createdById])
  @@index([fromTimelineId])
  @@index([toTimelineId])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  imageTagId  Int
  storyId     Int

  createdBy User        @relation(fields: [createdById], references: [id])
  imageTag  ImageTag    @relation(fields: [imageTagId], references: [id])
  story     Story       @relation(fields: [storyId], references: [id])
  showImage ShowImage[]

  @@index([createdById])
  @@index([imageTagId])
  @@index([storyId])
}

model ImageTag {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String

  createdBy User    @relation(fields: [createdById], references: [id])
  images    Image[]

  @@index([createdById])
}

model ImageAttribute {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShowImage {
  id        Int      @id @default(autoincrement())
  order     Int
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  imageId     Int
  timelineId  Int

  createdBy User     @relation(fields: [createdById], references: [id])
  image     Image    @relation(fields: [imageId], references: [id])
  timeline  Timeline @relation(fields: [timelineId], references: [id])

  @@index([createdById])
  @@index([imageId])
  @@index([timelineId])
}

model Counter {
  id   Int    @id @default(autoincrement())
  name String

  storyId Int

  story         Story           @relation(fields: [storyId], references: [id])
  CounterChange CounterChange[]

  @@index([storyId])
}

model CounterChange {
  id        Int      @id @default(autoincrement())
  diff      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  counterId Int

  counter Counter @relation(fields: [counterId], references: [id])

  @@index([counterId])
}

model Menu {
  id          Int      @id @default(autoincrement())
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  timelineId  Int

  createdBy User       @relation(fields: [createdById], references: [id])
  timeline  Timeline   @relation(fields: [timelineId], references: [id])
  menuItems MenuItem[]

  @@index([createdById])
  @@index([timelineId])
}

model MenuItem {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  menuId      Int

  createdBy User @relation(fields: [createdById], references: [id])
  menu      Menu @relation(fields: [menuId], references: [id])

  @@index([menuId])
  @@index([createdById])
}

//
// Auth models
//

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String?

  userId String

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// User model
//

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  image      String?
  accounts   Account[]
  sessions   Session[]
  stories    Story[]
  timelines  Timeline[]
  characters Character[]
  says       Say[]
  menus      Menu[]
  menuItems  MenuItem[]
  images     Image[]
  imageTags  ImageTag[]
  jumps      Jump[]
  inputs     Input[]
  showImages ShowImage[]
}
