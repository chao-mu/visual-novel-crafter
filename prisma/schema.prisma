generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Story {
  id          Int         @id @default(autoincrement())
  title       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String
  createdBy   User        @relation(fields: [createdById], references: [id])
  timelines   Timeline[]
  characters  Character[]

  @@index([title])
  @@index([createdById])
}

model Say {
  id          Int       @id @default(autoincrement())
  order       Int
  text        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  timelineId  Int
  characterId Int
  createdBy   User      @relation(fields: [createdById], references: [id])
  timeline    Timeline  @relation(fields: [timelineId], references: [id])
  character   Character @relation(fields: [characterId], references: [id])

  @@index([createdById])
  @@index([timelineId])
  @@index([characterId])
}

model Character {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  storyId     Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  story       Story    @relation(fields: [storyId], references: [id])
  says        Say[]

  @@index([createdById])
  @@index([storyId])
}

model Timeline {
  id          Int      @id @default(autoincrement())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  storyId     Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  story       Story    @relation(fields: [storyId], references: [id])
  says        Say[]

  @@index([createdById])
  @@index([storyId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stories       Story[]
  timelines     Timeline[]
  characters    Character[]
  says          Say[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
