"use client";

// react-hook-form
import { useForm, useFieldArray } from "react-hook-form";

// NextJs
import { useRouter } from "next/navigation";

// Ours
import { api } from "@/trpc/react";
import formStyles from "@/styles/form.module.css";
import { SubmitButton } from "@/app/_components/submit-button";

type AddEventProps = {
  timelineId: number;
  storyId: number;
  order: number;
};

type SayForm = {
  text: string;
  characterId: number;
  eventType: "say";
};

type MenuForm = {
  menuItems: {
    timelineId?: number;
    text: string;
  }[];
};

function MenuFormFields({ control, register }) {
  const { fields, append, remove } = useFieldArray({
    control,
    name: "menuItems",
  });

  return (
    <div>
      {fields.map((item, index) => {
        return (
          <div key={item.id}>
            <input {...register(`menuItems.${index}.text`)} />
            <button type="button" onClick={() => remove(index)}>
              Delete
            </button>
          </div>
        );
      })}
      <button
        type="button"
        onClick={() => {
          append({ text: "" });
        }}
      >
        Add
      </button>
    </div>
  );
}
const SayFormFields = ({ register, characters }) => (
  <>
    <select id="characterId" {...register("characterId")}>
      {characters.data?.map((character) => (
        <option key={character.id} value={character.id}>
          {character.name}
        </option>
      ))}
    </select>
    <input id="text" type="text" placeholder="Text" {...register("text")} />
  </>
);

export function AddEvent({ timelineId, storyId, order }: AddEventProps) {
  const router = useRouter();
  const { register, reset, handleSubmit, watch, control } = useForm();
  const characters = api.character.getCharactersByStoryId.useQuery({
    storyId,
  });

  const onSuccess = () => {
    reset();
    router.refresh();
  };

  const addSay = api.timeline.addSay.useMutation({ onSuccess });

  const onSubmit = handleSubmit(({ text, characterId }, e) => {
    e?.preventDefault();
    addSay.mutate({
      text,
      order,
      characterId: Number(characterId),
      timelineId: Number(timelineId),
    });
  });

  const isLoading = addSay.isLoading;
  const eventType = watch("eventType");
  let fields;
  if (eventType === "say") {
    fields = <SayFormFields register={register} characters={characters} />;
  } else if (eventType === "menu") {
    fields = <MenuFormFields control={control} register={register} />;
  } else {
    fields = null;
  }

  return (
    <form onSubmit={onSubmit} className={formStyles["inline-form"]}>
      <select id="eventType" {...register("eventType")}>
        <option value="say">Say</option>
        <option value="menu">Menu</option>
      </select>
      {fields}
      <SubmitButton isLoading={isLoading} />
      <p className={formStyles["submission-error"]}>{addSay.error?.message}</p>
    </form>
  );
}
